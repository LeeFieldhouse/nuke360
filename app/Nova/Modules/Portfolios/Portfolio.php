<?php

namespace App\Nova\Modules\Portfolios;

use App\Nova\Modules\Bedrooms\BedroomRange;
use App\Nova\Modules\Kitchens\KitchenRange;
use App\Nova\Resource;
use Benjaminhirsch\NovaSlugField\Slug;
use Benjaminhirsch\NovaSlugField\TextWithSlug;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Date;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Str;
use Infinety\Filemanager\FilemanagerField;
use Intervention\Image\Facades\Image;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\HasMany;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Textarea;
use Laravel\Nova\Http\Requests\NovaRequest;
use App\Traits\Nova\NextFolderAfterCreateTrait;
use function foo\func;


class Portfolio extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Modules\Portfolios\Portfolio::class;
	public static $group = 'Portfolio';
    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'title';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'title',
    ];
	
	public static function redirectAfterCreate(NovaRequest $request, $resource)
	{
		NextFolderAfterCreateTrait::nextFolder('portfolios', \App\Modules\Portfolios\Portfolio::class);
		
		return parent::redirectAfterCreate($request, $resource); // TODO: Change the autogenerated stub
	}

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make()->sortable(),
			Text::make('Meta Title')
				->hideFromIndex()->rules(['required']),
			Textarea::make('Meta Description')->rules(['required']),
			FilemanagerField::make('Featured Image')->displayAsImage()->rules(['required'])
				->hideFromIndex(),
			Text::make('Featured Image Alt')->nullable()->hideFromIndex(),
			Textarea::make('Summary')->rules(['required']),
			TextWithSlug::make('Title')->slug('slug')->rules(['required']),
			Slug::make('Slug'),
			Text::make('Subtitle')
			->hideFromIndex(),
			Textarea::make('Case Study'),
			Textarea::make('Result'),
			Textarea::make('Experience'),
			\Laravel\Nova\Fields\Date::make('Completed Date')->help('This portfolio will only be visible after the completed date')->nullable(),
			Boolean::make('Is Active', function(){
				return $this->completed_date >= now()->toDate();
			}),
			HasMany::make('Images', 'images', PortfolioImage::class),
			BelongsTo::make('Type', 'type', PortfolioType::class),
			BelongsTo::make('Kitchen Range', 'kitchenRange', KitchenRange::class)->nullable()->help('not required but helpful to link to. Leave blank obviously if not a kitchen'),
			BelongsTo::make('Bedroom Range', 'bedroomRange', BedroomRange::class)->nullable()->help('not required but helpful to link to. Leave blank obviously if not a bedroom'),
			
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
